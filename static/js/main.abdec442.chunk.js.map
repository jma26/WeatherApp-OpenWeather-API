{"version":3,"sources":["Utils/api/WeatherAPI.js","Hooks/useCurrentLocation.js","Components/Header/Header.js","Components/Weather/TempIcon.js","Components/Weather/CurrentWeather.js","Components/Weather/WeatherInfo.js","Components/Weather/ForecastWeather.js","Components/Loading/Loading.js","Components/Weather/Weather.js","App/App.js","reportWebVitals.js","index.js"],"names":["WeatherAPI","getWeather","location","a","fetch","latitude","longitude","process","response","json","data","useCurrentLocation","useState","setLocation","error","setError","geoSuccess","position","coords","geoError","message","useEffect","navigator","geolocation","getCurrentPosition","Header","props","timezone","date","offset","formattedDate","Date","toString","className","TempIcon","icon","description","temp","src","alt","CurrentWeather","currentWeather","weather","Math","round","WeatherInfo","min","max","wind","ForecastWeather","console","log","forecastWeather","dt","toLocaleDateString","length","map","index","weekday","substring","unix","wind_speed","Loading","Weather","weatherData","setWeather","current","timezone_offset","daily","App","setWeatherData","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.abdec442.chunk.js","sourcesContent":["import { useState } from 'react';\r\n\r\nconst WeatherAPI = () => {\r\n\r\n  const getWeather = async (location) => {\r\n    try {\r\n      let response = await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${location.latitude}&lon=${location.longitude}&units=imperial&appid=${process.env.REACT_APP_OPENWEATHER_API_KEY}`);\r\n\r\n      let data = await response.json();\r\n\r\n      if (data) {\r\n        return data;\r\n      }\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  return {\r\n    getWeather,\r\n  }\r\n}\r\n\r\nexport default WeatherAPI;","import { useState, useEffect } from 'react';\r\nimport WeatherAPI from '../Utils/api/WeatherAPI';\r\n\r\nconst useCurrentLocation = () => {\r\n\r\n  // Store Location in state\r\n  const [location, setLocation] = useState();\r\n\r\n  // Store Error message in state\r\n  const [error, setError] = useState();\r\n\r\n  // Success handler for geolocation `getCurrentPosition` method\r\n  const geoSuccess = (position) => {\r\n    const { latitude, longitude } = position.coords;\r\n    setLocation({\r\n      latitude,\r\n      longitude\r\n    })\r\n  }\r\n\r\n  // Error handler for gelocation `getCurrentPosition` method\r\n  const geoError = (error) => {\r\n    setError(`${error.message}: Using default coordinates`);\r\n    setLocation({\r\n      latitude: 33.86751,\r\n      longitude: -117.99812\r\n    });\r\n  }\r\n\r\n  // If geolocation is undefined, handleError + set default coordinates\r\n  useEffect(() => {\r\n    const { geolocation } = navigator;\r\n    if (!geolocation) {\r\n      setError('Geolocation is not supported');\r\n      setLocation({\r\n        latitude: 33.86751,\r\n        longitude: -117.99812\r\n      });\r\n    }\r\n\r\n    // Call Geolocation API\r\n    navigator.geolocation.getCurrentPosition(geoSuccess, geoError);\r\n  }, []);\r\n\r\n  return { location, error };\r\n}\r\n\r\nexport default useCurrentLocation;","const Header = (props) => {\r\n  const {timezone, date, offset} = props\r\n\r\n  const formattedDate = new Date(date*1000+(offset*1000)).toString();\r\n  return (\r\n    <div className=\"header\">\r\n      <h2 className=\"header-city\">{timezone}</h2>\r\n      <p className=\"header-date\">{formattedDate}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Header;","const TempIcon = (props) => {\r\n  const {\r\n    icon,\r\n    description,\r\n    temp,\r\n  } = props;\r\n\r\n  if (icon && temp) {\r\n    return (\r\n      <>\r\n        <img\r\n          className=\"icon\"\r\n          src={`http://openweathermap.org/img/wn/${icon}@2x.png`}\r\n          alt={description}\r\n        />\r\n        <div className=\"temp-container\">\r\n          <h4 className=\"temp-header\">Current Temperature</h4>\r\n          <p className=\"temp\">{temp} &#176;</p>\r\n          <p className=\"description\">{description}</p>\r\n        </div>\r\n      </>\r\n    )\r\n  } else {\r\n    return (\r\n      <>\r\n      <p>Error</p>\r\n      </>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default TempIcon;","import TempIcon from './TempIcon';\r\nimport './weather.css';\r\n\r\nconst CurrentWeather = (props) => {\r\n  const {currentWeather} = props;\r\n\r\n  return (\r\n    <div className=\"currentWeather\">\r\n      <TempIcon\r\n        icon={currentWeather.weather[0].icon}\r\n        description={currentWeather.weather[0].description}\r\n        temp={Math.round(`${currentWeather.temp}`)}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CurrentWeather;","const WeatherInfo = (props) => {\r\n  const {\r\n    min,\r\n    max,\r\n    wind\r\n  } = props;\r\n\r\n  if (min && max && wind) {\r\n    return (\r\n      <div className=\"info-container\">\r\n        <p className=\"min-temp info\">{min} &#176; <span className=\"info-prop\">Low</span></p>\r\n        <p className=\"max-temp info\">{max} &#176; <span className=\"info-prop\">High</span></p>\r\n        <p className=\"wind info\">{wind}mph <span className=\"info-prop\">Wind</span></p>\r\n      </div>\r\n    )\r\n  } else {\r\n    return (\r\n      <>\r\n        <p>Error</p>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default WeatherInfo;","import TempIcon from './TempIcon';\r\nimport WeatherInfo from './WeatherInfo';\r\n\r\nconst ForecastWeather = (props) => {\r\n  console.log(props.forecastWeather);\r\n  console.log(new Date(props.forecastWeather[0].dt * 1000).toLocaleDateString('en-US'));\r\n  return (\r\n    <div className=\"forecastWeather\">\r\n      <p className=\"forecast-header\">Next {props.forecastWeather.length} Days</p>\r\n      <div className=\"forecast-cardList\">\r\n        {\r\n          props.forecastWeather.map((weather, index) => {\r\n            return (\r\n              <div className=\"forecast-card\" key={index}>\r\n                <div className=\"date-container\">\r\n                  <p className=\"day\">\r\n                    {\r\n                      new Date(weather.dt * 1000).toLocaleDateString('en-US', { weekday: 'long' }).substring(0, 3)\r\n                    }\r\n                  </p>\r\n                  <p className=\"date\">\r\n                    {\r\n                      new Date(weather.dt * 1000).toLocaleDateString('en-US').substring(0, 5)\r\n                    }\r\n                  </p>\r\n                </div>\r\n                <TempIcon\r\n                  temp={`${Math.round(`${weather.temp.min}`)} - ${Math.round(`${weather.temp.max}`)}`}\r\n                  icon={weather.weather[0].icon}\r\n                  unix={weather.dt}\r\n                  description={weather.weather[0].description}\r\n                />\r\n                <WeatherInfo\r\n                  wind={Math.round(`${weather.wind_speed}`)}\r\n                  min={Math.round(`${weather.temp.min}`)}\r\n                  max={Math.round(`${weather.temp.max}`)}\r\n                />\r\n              </div>\r\n            )\r\n          })\r\n        }\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ForecastWeather;","import './loading.css';\r\n\r\nconst Loading = () => {\r\n  return (\r\n    <div className=\"Loading\">\r\n      <div className=\"Loading__spinner\">\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Loading;","import { useState } from 'react';\r\nimport Header from '../Header/Header';\r\nimport CurrentWeather from './CurrentWeather';\r\nimport ForecastWeather from './ForecastWeather';\r\nimport Loading from '../Loading/Loading';\r\nimport { useEffect } from 'react';\r\n\r\nconst Weather = (props) => {\r\n  const [weather, setWeather] = useState(props.weatherData);\r\n  const {weatherData} = props;\r\n\r\n  useEffect(() => {\r\n    setWeather(weather);\r\n  }, [weather])\r\n\r\n  return (\r\n    <>\r\n    {\r\n      !weatherData ? <Loading /> : (\r\n        <div className=\"weather\">\r\n          <Header\r\n            timezone={weatherData.timezone}\r\n            date={weatherData.current.dt}\r\n            offset={weatherData.timezone_offset}\r\n          />\r\n          <CurrentWeather currentWeather={weatherData.current} />\r\n          <ForecastWeather forecastWeather={weatherData.daily} />\r\n        </div>\r\n      )\r\n    }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Weather;","import { useState, useEffect } from 'react';\nimport useCurrentLocation from '../Hooks/useCurrentLocation';\nimport WeatherAPI from '../Utils/api/WeatherAPI';\nimport Weather from '../Components/Weather/Weather';\nimport './App.css';\n\nconst App = () => {\n  const {location, error} = useCurrentLocation();\n  const [weatherData, setWeatherData] = useState();\n\n  const {\n    getWeather,\n  } = WeatherAPI();\n\n  useEffect(() => {\n\n    if (location) {\n      (async () => {\n        try {\n          let response = await getWeather(location);\n          setWeatherData({\n            ...response\n          })\n        } catch (error) {\n          console.log(error);\n        }\n      })();\n    }\n\n  }, [location])\n\n  return (\n    <div className=\"App\">\n      <Weather weatherData={weatherData} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}